{"version":3,"sources":["components/CodeEditor.js","hooks/LocalStorage.js","App.js","index.js"],"names":["CodeEditor","props","displayName","language","value","theme","onChange","className","onBeforeChange","editor","data","options","mode","lineNumbers","lineWrapping","lint","LocalStorage","key","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","App","html","useHTML","css","useCSS","js","useJS","renderView","setrenderView","timeout","setTimeout","clearTimeout","darkMode","setDarkMode","themeMode","setThemeMode","React","body","document","toggle","querySelector","classList","add","remove","id","onClick","srcDoc","title","sandbox","width","frameBorder","height","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.309009d1.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'codemirror/lib/codemirror.css';\r\nimport 'codemirror/theme/material.css';\r\nimport 'codemirror/mode/xml/xml';\r\nimport 'codemirror/mode/javascript/javascript';\r\nimport 'codemirror/mode/css/css';\r\nimport { Controlled } from 'react-codemirror2';\r\n\r\nexport default function CodeEditor(props){\r\n    const {\r\n        displayName,\r\n        language,\r\n        value,\r\n        theme,\r\n        onChange\r\n    } = props\r\n    function handleChange(editor , data , value){\r\n        onChange(value)\r\n    }\r\n  return (\r\n\r\n    <div className=\"Editor-Box\">\r\n        <div className=\"stylescoloumnTitle\">\r\n                    {displayName}\r\n        </div>\r\n    <Controlled \r\n        value = {value} \r\n        onBeforeChange = {handleChange}\r\n        className=\"Mirror-Editor\"\r\n        options = {{\r\n            mode: language,\r\n            theme: theme,\r\n            lineNumbers: true,\r\n            lineWrapping: true,\r\n            lint: true\r\n        }} \r\n    />\r\n    </div>\r\n  );\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\nconst PREFIX = 'online-editor-'\r\n\r\nexport default function LocalStorage(key, initialValue) {\r\n  const prefixedKey = PREFIX + key\r\n\r\n  const [value, setValue] = useState(() => {\r\n    const jsonValue = localStorage.getItem(prefixedKey)\r\n    if (jsonValue != null) return JSON.parse(jsonValue)\r\n\r\n    if (typeof initialValue === 'function') {\r\n      return initialValue()\r\n    } else {\r\n      return initialValue\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n  }, [prefixedKey, value])\r\n\r\n  return [value, setValue]\r\n}","import './App.css';\nimport React, { useState ,useEffect } from 'react';\nimport CodeEditor from './components/CodeEditor';\nimport LocalStorage from './hooks/LocalStorage';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs'\nimport 'react-tabs/style/react-tabs.css';\n\n\nfunction App() {\n  \n  const [html, useHTML] = LocalStorage('html', '')\n  const [css, useCSS] = LocalStorage('css', '')\n  const [js, useJS] = LocalStorage('js', '')\n  const [renderView, setrenderView] = useState('')\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setrenderView(`\n        <html>\n          <body>${html}</body>\n          <style>${css}</style>\n          <script>${js}</script>\n        </html>\n      `)\n    }, 250)\n\n    return () => clearTimeout(timeout)\n  }, [html, css, js])\n  const [ darkMode, setDarkMode ] = useState(false)\n   \n  const [themeMode, setThemeMode] = useState(\n     \"material\"\n  );\n  React.useEffect(() => {\n    const body = document.body\n    const toggle = document.querySelector('.toggle-inner')\n    \n    // If dark mode is enabled - adds classes to update dark-mode styling.\n    // Else, removes and styling is as normal.\n    if( darkMode === true ) {\n      body.classList.add('dark-mode')\n      toggle.classList.add('toggle-active')\n    } else {\n      body.classList.remove('dark-mode')\n      toggle.classList.remove('toggle-active')\n    }\n  }, [darkMode])\n\n  return (\n    <div className=\"dyte\">\n      <div className=\"Editor\">\n      \n      <Tabs className=\"styleseditorName\">\n        <TabList className=\"tabs\">\n            <Tab className=\"stylestab\">Index.html</Tab>\n            <Tab className=\"stylestab\">Index.css</Tab>\n            <Tab className=\"stylestab\">Index.js</Tab>\n            <div className=\"Toggletheme\" id=\"toggle\" onClick={() => darkMode === false ? (setDarkMode(true), setThemeMode('base16-light'))  : (setDarkMode(false), setThemeMode('material'))}><div className=\"toggle-inner\"/></div>\n        </TabList>\n        <TabPanel className=\"stylescode\">\n        \n          <CodeEditor displayName=\"HTML\" language=\"xml\" value={html} theme={themeMode} onChange={useHTML} />\n         \n        </TabPanel>\n        <TabPanel className=\"stylescode\">\n        \n          <CodeEditor displayName=\"CSS\" language=\"css\" value={css} theme={themeMode} onChange={useCSS}/>\n        \n        </TabPanel>\n        <TabPanel className=\"stylescode\">\n        \n          <CodeEditor displayName=\"JAVASCRPIT\" language=\"js\" value={js} theme={themeMode} onChange={useJS} />\n        \n        </TabPanel>\n      </Tabs>\n    </div>\n    \n      <div className=\"LiveView\">\n        <iframe srcDoc={renderView} title=\"live\" sandbox=\"allow-scripts\" width =\"100%\" frameBorder=\"0\" height=\"100%\"></iframe>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}